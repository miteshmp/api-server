require 'json'
require 'grape'
require 'error_format_helpers'

# Class name :- AppAPI_v1
# Description :- Defines API for application
class AppAPI_v1 < Grape::API

  formatter :json, SuccessFormatter
  format :json
  default_format :json
  version 'v1', :using => :path, :format => :json

  helpers AwsHelper

  params do
    optional :suppress_response_codes, type: Boolean, :desc => "Suppress response codes"
  end

  # Resource :- apps
  resource :apps do

    # Query :- List of all apps that belong to current user.
    # Method :- GET
    # Parameters :-
    #     None
    # Response :-
    #         Return all APPS informtation.
    desc "List of all apps that belong to current user. "

      get  do

        active_user = authenticated_user ;
        status 200
        list = active_user.apps.includes(:device_app_notification_settings).all
        present list, with: App::Entity

      end
    # Complete Query :- "List of all apps"

    # Query :-Create an app that belongs to current user.
    # Method :- POST
    # Parameters :-
    #         name  :- APP name ( Must be unique )
    #         device_code :- Device code generated by application
    #         software_version :- App Software version
    # Response :-
    #         Return User information
    desc "Create an app that belongs to current user. "

      params do

        requires :name, :type => String, :desc => "Name of the app"
        requires :device_code, :type => String, :desc => "Device code"
        requires :software_version, :type => String, :desc => "Software version"
        optional :tenant_id, :type => Integer, :desc => "Tenant id is used to know the type of client(Binatone,Vtech,Connect,etc)"
      end

      post 'register' do
      
        active_user = authenticated_user

        current_app = active_user.apps.where(device_code: params[:device_code]).first

        # It is possible that User may or may not deleted "application" from account & Other user is trying to access
        # application on same device. To avoid SNS endpoint issue, please delete from user account.
        current_app = App.where(device_code: params[:device_code]).first unless current_app

        award_free_trial = false
        if current_app
          # We check if a user is upgrading to V4 app to award free trial automatically
          support_version = Gem::Version.new(4)
          if (Gem::Version.new(current_app.software_version) < support_version && Gem::Version.new(params[:software_version]) >= support_version) 
            award_free_trial = true
          end

          # It is better that SNS Endpoint is unregistered for device code even same user is trying to register
          # application.
          delete_status = delete_registered_notification_endpoint(current_app.sns_endpoint)

          current_app.user_id = active_user.id
          current_app.notification_type = "none"
          current_app.registration_id = nil
          if delete_status
            current_app.sns_endpoint = nil
          end

        else
          # no application is registered using device code.
          current_app = active_user.apps.new ;
        end

        current_app.device_code = params[:device_code]
        current_app.name = params[:name]
        current_app.software_version = params[:software_version]
        current_app.tenant_id = params[:tenant_id] if params[:tenant_id].present?
        current_app.save!

        if award_free_trial
          devices = active_user.devices
          devices.each do |device|
            exist_free_trial = DeviceFreeTrial.where(device_registration_id: device.registration_id).first
            if (!exist_free_trial.present?)
              device.create_free_trial(Settings.upgrade_free_trial_plan)
            end
          end
        end

         # Save all records in database
        status 200
        present current_app, with: App::Entity
      end
    # Complete query :- "Register"

    # Query :- Register device for push notification.
    # Method :- POST
    # Parameters :-
    #         notification_type  :- GCM or APNS
    #         registration_id :- APP Registration ID
    # Response :-
    #         Return App information

    desc "Register device for push notification. "

      params do
        requires :notification_type, :validate_notification_type => true, :desc => "Notification type. Currently supports 'gcm' and 'apns'"
        requires :registration_id, :type => String, :desc => "App registration id or device token provided by either GCM or APNS."
        optional :app_unique_id, :type => String, :desc => "App Unique ID"
        optional :cert_type, :type => Integer, :desc =>  "Set '1' for development & '0' for production", :validate_certificate_type => true, :default => 0
        optional :tenant_id, :type => Integer, :desc => "Tenant id is used to know the type of client(Binatone,Vtech,Connect,etc)"
      end

      post ':id/register_notifications' do

        active_user = authenticated_user ;

        app = active_user.apps.where(id: params[:id]).first
        not_found!(APP_DOES_NOT_BELONG_TO_USER, "App: " + params[:id].to_s) unless app

        if params[:app_unique_id]
          app_unique_id = params[:app_unique_id] 
        else
          app_unique_id = DEFAULT_APP_UNIQUE_ID[params[:notification_type]]  
        end

        not_found!(APP_UNIQUE_ID_NOT_FOUND, "App unique id: " + app_unique_id.to_s) unless PLATFORM_ENDPOINTS.has_key?(app_unique_id)
        
        platform_endpoint = PLATFORM_ENDPOINTS[app_unique_id][params[:cert_type]]        
        not_found!(PLATFORM_ENDPOINT_NOT_FOUND, "Platform endpoint not found for app unique id: " + app_unique_id.to_s + "for cert_type " + params[:cert_type].to_s) unless platform_endpoint

        # We have found that there is no support in iOS platform to generate unique "device_code", so sometime
        # it is possible that application generates different "device_code" during registration process ( assume that
        # application is already registerd) and provides same "registration_id" which is received from iCloud platform.
        # In this case, we have two device_code which belongs to same registration ID which is wrong.
        if params[:notification_type] == EventType::PUSH_NOTIFICATION_TYPE_APNS

          sns_apps_details = nil ;
          
          sns_apps_details = platform_endpoint.split('/').last

          # fetch duplicate application detail from database ( belongs to apns platform)
          duplicate_app = App.where("registration_id = ? AND sns_endpoint LIKE ?",params[:registration_id],"%#{sns_apps_details}%").first if sns_apps_details


          # verify that endpoint is present in Amazon SNS or not
          # verify current application object with duplicate application object. In worst case, application
          # is trying to register notification again without doing application registration.
          if ( duplicate_app && duplicate_app.sns_endpoint && app.id != duplicate_app.id )

              delete_status = delete_registered_notification_endpoint(duplicate_app.sns_endpoint) ;

              #if delete_status
                App.destroy(duplicate_app.id);
              #end

          end
        end

        app.notification_type = params[:notification_type]
        app.registration_id = params[:registration_id]
        app.app_unique_id = app_unique_id
        app.sns_endpoint = register_for_mobile_push(platform_endpoint, params[:registration_id])
        app.save!

        status 200
        present app, with: App::Entity
      end
    # Complete :- "Register a device for push notification"

    # Query :- Unregister push notification device.
    # Method :- POST
    # Parameters :-
    #         None
    # Response :-
    #         Return App information
    desc "Unregister push notification device. "
    params do
			optional :tenant_id, :type => Integer, :desc => "Tenant id is used to know the type of client(Binatone,Vtech,Connect,etc)"
		 end

      post ':id/unregister_notifications' do

        active_user = authenticated_user ;
        app = active_user.apps.where(id: params[:id]).first
        not_found!(APP_DOES_NOT_BELONG_TO_USER, "App: " + params[:id].to_s) unless app

        delete_status = delete_registered_notification_endpoint(app.sns_endpoint) ;
        if delete_status
          app.sns_endpoint = nil ;
        end
        app.registration_id = nil
        app.notification_type = "none"
        app.save!

        

        status 200
        present app, with: App::Entity

      end
    # Complete query:- "unregister_notifications"

    # Query :- Update APP
    # Method :- PUT
    # Parameters :-
    #         name :- Name of the app
    #         software_version :- Software version of APP
    # Response :-
    #         software_version App information
    desc "Update app."

      params do
        optional :name, :type => String, :desc => "Name of the app"
        requires :software_version, :type => String, :desc => "Software version"
        optional :tenant_id, :type => Integer, :desc => "Tenant id is used to know the type of client(Binatone,Vtech,Connect,etc)"
      end

      put ':id' do

        active_user = authenticated_user ;
        app = active_user.apps.where(id: params[:id]).first
        not_found!(APP_DOES_NOT_BELONG_TO_USER, "App: " + params[:id].to_s) unless app

        app.name = params[:name] if params[:name]
        app.software_version = params[:software_version]
        app.save!

        status 200
        present app, with: App::Entity
      end
    # Complete query :- "Update app"

    # Query :- Unregister/delete an app from the server.
    # Method :- DELETE
    # Parameters :-
    #         None
    # Response :-
    #         software_version App information
    desc "Unregister/delete an app from the server. This will delete the app record completely, including the corresponding notification settings for the app."

      delete ':id/unregister' do

        active_user = authenticated_user ;
        app = active_user.apps.where(id: params[:id]).first
        not_found!(APP_DOES_NOT_BELONG_TO_USER, "App: " + params[:id].to_s) unless app

        delete_status = delete_registered_notification_endpoint(app.sns_endpoint);
        if delete_status
          # It is better that server should delete "notification informaton"
          app.notification_type = "none";
          app.registration_id = nil;
          app.sns_endpoint = nil;
          app.save!;
        end
        # We are holding on to the user's app (to know app history) to automatically apply free trial for users
        # upgrading to V4 app.
        # App.destroy(app.id)
     
        status 200
        "App Deleted!"
      end
    # Complete query : "delete app"

    # Query :- Update device alert settings
    # Method :- PUT
    # Parameters :-
    #         settings :- App notification settings
    # Response :-
    #         software_version App information
    desc "Update device alert settings. ", {
        :notes => <<-NOTE
      The parameter settings takes an array. An example of the input is shown as follows:
      {
        "api_key" : "some_api_key......",
        "settings" : [ 
          { "device_id" : 1, "alert" : 1, "is_enabled" : false },
          { "device_id" : 1, "alert" : 2, "is_enabled" : false },
          { "device_id" : 2, "alert" : 2, "is_enabled" : false },
          { "device_id" : 2, "alert" : 1, "is_enabled" : true }
        ]
      }
      *** This query CANNOT be executed using Swagger framework. Please use some REST client (like Postman, or RESTClient etc.)
      NOTE
    }
      params do
        requires :settings, :type => Array, :desc => "App notification settings. This takes a JSON array. See query notes for example."
        optional :tenant_id, :type => Integer, :desc => "Tenant id is used to know the type of client(Binatone,Vtech,Connect,etc)"
      end

      put ':id/notification_settings' do

        active_user = authenticated_user ;

        app = active_user.apps.where(id: params[:id]).first
        not_found!(APP_DOES_NOT_BELONG_TO_USER, "App: " + params[:id].to_s) unless app

        params[:settings].each do |item|
          device_id = ""
          alert = ""
          is_enabled = ""

          begin

            device_id = item.device_id
            alert = item.alert
            is_enabled = item.is_enabled

            rescue Exception => NoMethodError
              bad_request!(INVALID_APP_SETTINGS_FORMAT,"Parameter 'settings' should be a JSON array .")
          end

          device = active_user.devices.where(id: item.device_id).first
          not_found!(DEVICE_DOES_NOT_BELONG_TO_USER, "Device: " + device_id.to_s) unless device

          obj = app.device_app_notification_settings.where(device_id: device_id, alert: alert).first

          unless obj
            obj = app.device_app_notification_settings.new
            obj.device_id = device_id
            obj.alert = alert
          end

          obj.is_enabled = is_enabled
          obj.save!
        end

        status 200
        "Done"
      end
    end
    # Complete query :- "notification_settings"
end
# Complete class :- AppAPI_v1